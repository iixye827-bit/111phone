<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>记录中心</title>
    <style>
        /* [CSS - V3 - 漫游功能与UI优化] */
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Arial', -apple-system, BlinkMacSystemFont, sans-serif; }
        :root {
            --day-color1: #f5f7fa; --day-color2: #e4eaf5;
            --night-color1: #1f2a40; --night-color2: #16213e;
            --hold-border: #5B99E2; --text-day: #2d3748; --text-night: #e0e6f0;
            --bg-day-element: linear-gradient(135deg, var(--day-color2), var(--day-color1));
            --bg-night-element: linear-gradient(135deg, var(--night-color2), var(--night-color1));
            --shadow-light-day: rgba(255, 255, 255, 0.9); --shadow-dark-day: rgba(174, 190, 212, 0.4);
            --shadow-light-night: rgba(40, 52, 79, 0.9); --shadow-dark-night: rgba(0, 0, 0, 0.3);
        }
        html { height: 100%; }
        body { 
            min-height: 100%; 
            background: linear-gradient(135deg, var(--day-color1) 0%, var(--day-color2) 100%); 
            padding: 20px; 
            display: flex; 
            justify-content: center;
            align-items: center;
            transition: background 0.5s ease; 
            touch-action: manipulation; 
            overflow: hidden;
            color: var(--text-day);
        }
        body.dark-mode { 
            background: linear-gradient(135deg, var(--night-color1) 0%, var(--night-color2) 100%); 
            color: var(--text-night); 
        }

        /* 主应用容器 */
        .app-container {
            width: 100%;
            max-width: 800px;
            height: calc(100vh - 40px);
            display: flex;
            flex-direction: column;
            position: relative;
            overflow: hidden;
        }

        /* 页面/视图切换 */
        .page {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            transform: scale(0.98);
            transition: opacity 0.3s ease, transform 0.3s ease;
            pointer-events: none;
            background: inherit; /* 继承body背景 */
        }
        .page.active {
            opacity: 1;
            transform: scale(1);
            pointer-events: auto;
            z-index: 10;
        }

        /* 统一头部样式 */
        .page-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px;
            flex-shrink: 0;
            position: relative;
        }
        .page-header .title {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
            font-size: 24px;
            font-weight: 700;
        }
        .header-btn {
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 10px;
            transition: background-color 0.2s;
            border: none;
            background: transparent;
            color: inherit;
            z-index: 5;
        }
        .header-btn:hover { background-color: rgba(0,0,0,0.05); }
        body.dark-mode .header-btn:hover { background-color: rgba(255,255,255,0.1); }
        .header-btn.back-btn { font-size: 24px; padding: 5px 10px; }
        .header-btn.manage-btn, .header-btn.wander-btn { color: var(--hold-border); }
        .header-controls { display: flex; gap: 8px; }

        /* 内容列表容器 */
        .list-container {
            flex-grow: 1;
            overflow-y: auto;
            padding: 0 15px 80px 15px;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 20px;
            align-content: flex-start;
        }
        .list-container.manage .folder-item .delete-icon,
        .list-container.manage .album-item .delete-icon { display: flex; }

        /* --- Hub View --- */
        #hub-view .title { position: static; transform: none; font-size: 32px; margin-bottom: 40px; text-align: center; }
        #hub-view-content { flex-grow: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 30px; }
        .hub-btn {
            width: 80%; max-width: 300px; padding: 40px 20px;
            border: none; border-radius: 20px;
            box-shadow: 10px 10px 20px var(--shadow-dark-day), -10px -10px 20px var(--shadow-light-day);
            background: var(--bg-day-element); color: var(--text-day);
            font-size: 24px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;
        }
        body.dark-mode .hub-btn {
            box-shadow: 10px 10px 20px var(--shadow-dark-night), -10px -10px 20px var(--shadow-light-night);
            background: var(--bg-night-element); color: var(--text-night);
        }
        .hub-btn:active {
             box-shadow: inset 6px 6px 12px var(--shadow-dark-day), inset -6px -6px 12px var(--shadow-light-day);
        }
         body.dark-mode .hub-btn:active {
            box-shadow: inset 6px 6px 12px var(--shadow-dark-night), inset -6px -6px 12px var(--shadow-light-night);
        }

        /* --- Memo --- */
        #notes-list-container { grid-template-columns: 1fr; }
        .folder-item, .note-item, .album-item {
            position: relative; padding: 20px 15px; border: none; border-radius: 14px;
            box-shadow: 8px 8px 16px var(--shadow-dark-day), -8px -8px 16px var(--shadow-light-day);
            background: var(--bg-day-element); font-size: 16px; font-weight: 600; color: var(--text-day);
            cursor: pointer; transition: all 0.3s ease; user-select: none; -webkit-tap-highlight-color: transparent; text-align: left;
        }
        .delete-icon {
            display: none; position: absolute; top: -8px; right: -8px; width: 28px; height: 28px;
            background-color: #f56565; color: white; border-radius: 50%; border: 2px solid white;
            font-size: 20px; font-weight: bold; line-height: 24px; text-align: center; cursor: pointer; z-index: 10;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2); align-items: center; justify-content: center;
        }
        body.dark-mode .folder-item, body.dark-mode .note-item, body.dark-mode .album-item {
            box-shadow: 8px 8px 16px var(--shadow-dark-night), -8px -8px 16px var(--shadow-light-night);
            background: var(--bg-night-element); color: var(--text-night);
        }
        .folder-item:active, .note-item:active, .album-item:active {
            box-shadow: inset 4px 4px 8px var(--shadow-dark-day), inset -4px -4px 8px var(--shadow-light-day); transform: translateY(0);
        }
        body.dark-mode .folder-item:active, body.dark-mode .note-item:active, body.dark-mode .album-item:active {
            box-shadow: inset 4px 4px 8px var(--shadow-dark-night), inset -4px -4px 8px var(--shadow-light-night);
        }
        .folder-icon { font-size: 24px; margin-bottom: 10px; }
        .note-title { font-size: 18px; font-weight: bold; margin-bottom: 8px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .note-preview { font-size: 14px; font-weight: normal; color: #6a7889; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; }
        body.dark-mode .note-preview { color: #a0aec0; }
        .note-timestamp { font-size: 12px; font-weight: 300; color: #9A86A4; margin-top: 12px; }

        /* --- Album --- */
        .album-item { aspect-ratio: 1 / 1; display: flex; flex-direction: column; justify-content: space-between; align-items: flex-start; }
        .album-item .folder-icon { font-size: 32px; }
        .album-info { font-size: 12px; color: #889; }
        #photo-list-container { grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); }
        .photo-item {
            width: 100%; aspect-ratio: 1 / 1; border-radius: 12px;
            background-size: cover; background-position: center;
            box-shadow: inset 2px 2px 4px rgba(0,0,0,0.1), inset -2px -2px 4px rgba(255,255,255,0.7);
            cursor: pointer; transition: transform 0.2s ease;
        }
        .photo-item:hover { transform: scale(1.05); }

        /* --- Photo Viewer --- */
        #photo-viewer-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0,0,0,0.85); backdrop-filter: blur(8px);
            z-index: 5000; display: flex; flex-direction: column;
            opacity: 0; pointer-events: none; transition: opacity 0.3s ease;
        }
        #photo-viewer-overlay.active { opacity: 1; pointer-events: auto; }
        .viewer-header {
            display: flex; justify-content: flex-end; padding: 20px; color: white;
            background: linear-gradient(to bottom, rgba(0,0,0,0.5), transparent);
        }
        .viewer-btn {
            background: rgba(40,40,40,0.5); border: none; color: white;
            width: 40px; height: 40px; border-radius: 50%; font-size: 18px; cursor: pointer;
            transition: background-color 0.2s;
        }
        .viewer-btn:hover { background: rgba(60,60,60,0.7); }
        .viewer-content { flex-grow: 1; display: flex; align-items: center; justify-content: center; position: relative; }
        #viewer-img { max-width: 100%; max-height: 100%; object-fit: contain; }
        .nav-arrow {
            position: absolute; top: 50%; transform: translateY(-50%);
            width: 36px; height: 36px; font-size: 20px;
            opacity: 0.6;
        }
        .nav-arrow:hover { opacity: 1; }
        #photo-viewer-overlay.wandering .nav-arrow { display: none; }
        #prev-photo-btn { left: 15px; }
        #next-photo-btn { right: 15px; }
        .viewer-footer {
            padding: 20px; color: white; text-align: center;
            background: linear-gradient(to top, rgba(0,0,0,0.5), transparent);
        }
        #viewer-title { font-size: 18px; font-weight: bold; margin-bottom: 5px; }
        #viewer-description { font-size: 14px; }

        /* --- Common Elements --- */
        .empty-list-placeholder { grid-column: 1 / -1; text-align: center; color: #889; margin-top: 50px; }
        .fab {
            position: absolute; right: 25px; bottom: 25px; width: 50px; height: 50px; border-radius: 50%;
            border: none; cursor: pointer; transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
            box-shadow: 4px 4px 8px var(--shadow-dark-day), -4px -4px 8px var(--shadow-light-day);
            background: var(--bg-day-element); color: var(--text-day); font-size: 28px;
            display: flex; align-items: center; justify-content: center; user-select: none; z-index: 100;
        }
        body.dark-mode .fab {
            box-shadow: 4px 4px 8px var(--shadow-dark-night), -4px -4px 8px var(--shadow-light-night);
            background: var(--bg-night-element); color: var(--text-night);
        }
        .fab:active { transform: scale(0.95); }
        .modal-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.4);backdrop-filter:blur(5px);display:none;align-items:center;justify-content:center;z-index:1000;opacity:0;transition:opacity .3s ease}.modal-overlay.show{display:flex;opacity:1}.modal-content{width:90%;max-width:400px;background:var(--bg-day-element);color:var(--text-day);border-radius:16px;box-shadow:12px 12px 24px var(--shadow-dark-day),-12px -12px 24px var(--shadow-light-day);padding:20px;transition:transform .3s ease,background .5s ease,box-shadow .5s ease;transform:scale(.95)}.modal-overlay.show .modal-content{transform:scale(1)}body.dark-mode .modal-content{background:var(--bg-night-element);color:var(--text-night);box-shadow:12px 12px 24px var(--shadow-dark-night),-12px -12px 24px var(--shadow-light-night)}.modal-header{font-size:20px;font-weight:600;margin-bottom:20px}.modal-body{display:flex;flex-direction:column;gap:15px}.modal-input,.modal-textarea{width:100%;padding:12px 15px;border:none;border-radius:10px;font-size:16px;background:var(--bg-day-element);color:var(--text-day);box-shadow:inset 4px 4px 8px var(--shadow-dark-day),inset -4px -4px 8px var(--shadow-light-day);transition:all .3s ease;caret-color:var(--hold-border)}body.dark-mode .modal-input,body.dark-mode .modal-textarea{background:var(--bg-night-element);color:var(--text-night);box-shadow:inset 4px 4px 8px var(--shadow-dark-night),inset -4px -4px 8px var(--shadow-light-night)}.modal-input:focus,.modal-textarea:focus{outline:none;box-shadow:inset 4px 4px 8px var(--shadow-dark-day),inset -4px -4px 8px var(--shadow-light-day),0 0 0 2px var(--hold-border)}body.dark-mode .modal-input:focus,body.dark-mode .modal-textarea:focus{box-shadow:inset 4px 4px 8px var(--shadow-dark-night),inset -4px -4px 8px var(--shadow-light-night),0 0 0 2px var(--hold-border)}.modal-textarea{resize:vertical;min-height:80px;}.modal-footer{display:flex;justify-content:flex-end;gap:10px;margin-top:20px}.modal-button{padding:12px 20px;border:none;border-radius:12px;font-size:16px;font-weight:600;cursor:pointer;color:var(--text-day);background:var(--bg-day-element);box-shadow:4px 4px 8px var(--shadow-dark-day),-4px -4px 8px var(--shadow-light-day);transition:all .2s ease}body.dark-mode .modal-button{color:var(--text-night);background:var(--bg-night-element);box-shadow:4px 4px 8px var(--shadow-dark-night),-4px -4px 8px var(--shadow-light-night)}.modal-button:active{box-shadow:inset 4px 4px 8px var(--shadow-dark-day),inset -4px -4px 8px var(--shadow-light-day)}body.dark-mode .modal-button:active{box-shadow:inset 4px 4px 8px var(--shadow-dark-night),inset -4px -4px 8px var(--shadow-light-night)}.modal-button.primary{color:var(--hold-border)}
        #upload-thumbnail { max-width: 100px; max-height: 100px; border-radius: 8px; margin: 0 auto; object-fit: cover; }
        #note-editor-view {
            background: linear-gradient(135deg, var(--day-color1) 0%, var(--day-color2) 100%); z-index: 200;
            padding: 10px; transform: translateY(100%);
        }
        body.dark-mode #note-editor-view {
            background: linear-gradient(135deg, var(--night-color1) 0%, var(--night-color2) 100%);
        }
        #note-editor-view.active { transform: translateY(0); }
        .editor-header{display:flex;justify-content:space-between;align-items:center;padding:10px 5px;flex-shrink:0}.editor-btn{padding:10px 18px;border:none;border-radius:12px;font-size:16px;font-weight:600;cursor:pointer;color:var(--hold-border);background:var(--bg-day-element);box-shadow:4px 4px 8px var(--shadow-dark-day),-4px -4px 8px var(--shadow-light-day);transition:all .2s ease}body.dark-mode .editor-btn{color:var(--hold-border);background:var(--bg-night-element);box-shadow:4px 4px 8px var(--shadow-dark-night),-4px -4px 8px var(--shadow-light-night)}.editor-btn:active{box-shadow:inset 4px 4px 8px var(--shadow-dark-day),inset -4px -4px 8px var(--shadow-light-day)}body.dark-mode .editor-btn:active{box-shadow:inset 4px 4px 8px var(--shadow-dark-night),inset -4px -4px 8px var(--shadow-light-night)}#delete-note-btn{color:#f56565}.editor-content{flex-grow:1;display:flex;flex-direction:column;gap:10px;padding:10px 5px}#note-title-input,#note-content-textarea{width:100%;border:none;background:transparent;color:inherit;font-size:18px;padding:10px}#note-title-input{font-size:24px;font-weight:bold;flex-shrink:0}#note-content-textarea{flex-grow:1;resize:none;line-height:1.6}#note-title-input:focus,#note-content-textarea:focus{outline:none}
    </style>
</head>
<body>
    <div class="app-container">
        <!-- ===== HUB / 入口页面 ===== -->
        <div id="hub-view" class="page active">
            <div id="hub-view-content">
                <div class="page-header"><h1 class="title">记录中心</h1></div>
                <button id="goto-memo-btn" class="hub-btn">备忘录</button>
                <button id="goto-album-btn" class="hub-btn">相册</button>
            </div>
        </div>

        <!-- ===== MEMO / 备忘录部分 ===== -->
        <div id="memo-section" class="page">
            <!-- 文件夹视图 -->
            <div id="folder-view" class="page active">
                <div class="page-header">
                    <button class="header-btn back-btn" data-target="hub-view">&#10094;</button>
                    <h1 class="title">我的备忘录</h1>
                    <button id="manage-memo-folders-btn" class="header-btn manage-btn">管理</button>
                </div>
                <div id="folder-list-container" class="list-container"></div>
                <button id="add-folder-fab" class="fab">+</button>
            </div>
            <!-- 笔记列表视图 -->
            <div id="notes-view" class="page">
                <div class="page-header">
                    <button class="header-btn back-btn" data-target="folder-view">&#10094;</button>
                    <h1 id="notes-view-title" class="title">文件夹</h1>
                </div>
                <div id="notes-list-container" class="list-container"></div>
                <button id="add-note-fab" class="fab">+</button>
            </div>
            <!-- 笔记编辑器 -->
            <div id="note-editor-view" class="page">
                <div class="editor-header">
                    <button id="cancel-note-btn" class="editor-btn">取消</button>
                    <div>
                        <button id="delete-note-btn" class="editor-btn" style="display: none;">删除</button>
                        <button id="save-note-btn" class="editor-btn">完成</button>
                    </div>
                </div>
                <div class="editor-content">
                    <input type="text" id="note-title-input" placeholder="标题">
                    <textarea id="note-content-textarea" placeholder="在这里输入内容..."></textarea>
                </div>
            </div>
        </div>

        <!-- ===== ALBUM / 相册部分 ===== -->
        <div id="album-section" class="page">
            <!-- 相册文件夹视图 -->
            <div id="album-folder-view" class="page active">
                <div class="page-header">
                    <button class="header-btn back-btn" data-target="hub-view">&#10094;</button>
                    <h1 class="title">我的相册</h1>
                    <div class="header-controls">
                        <button id="global-wander-btn" class="header-btn wander-btn">漫游</button>
                        <button id="manage-album-folders-btn" class="header-btn manage-btn">管理</button>
                    </div>
                </div>
                <div id="album-list-container" class="list-container"></div>
                <button id="add-album-fab" class="fab">+</button>
            </div>
            <!-- 照片网格视图 -->
            <div id="photo-grid-view" class="page">
                 <div class="page-header">
                    <button class="header-btn back-btn" data-target="album-folder-view">&#10094;</button>
                    <h1 id="photo-grid-title" class="title">相册</h1>
                    <div class="header-controls">
                        <button id="local-wander-btn" class="header-btn wander-btn">漫游</button>
                    </div>
                </div>
                <div id="photo-list-container" class="list-container"></div>
                <label for="photo-uploader" id="add-photo-fab" class="fab">+</label>
                <input type="file" id="photo-uploader" multiple accept="image/*" style="display: none;">
            </div>
        </div>
    </div>

    <!-- ===== MODALS / 模态框 ===== -->
    <!-- 文件夹(备忘录/相册)模态框 -->
    <div id="folder-modal" class="modal-overlay">
        <div class="modal-content">
            <div id="folder-modal-title" class="modal-header">新文件夹</div>
            <div class="modal-body">
                <input type="text" id="folder-name-input" class="modal-input" placeholder="文件夹名称">
            </div>
            <div class="modal-footer">
                <button class="modal-button" data-action="close-modal">取消</button>
                <button id="save-folder-btn" class="modal-button primary">保存</button>
            </div>
        </div>
    </div>
    
    <!-- 上传照片时编辑信息模态框 -->
    <div id="photo-details-modal" class="modal-overlay">
        <div class="modal-content">
            <div id="photo-details-modal-title" class="modal-header">添加照片信息</div>
            <div class="modal-body">
                <img id="upload-thumbnail" src="" alt="upload thumbnail">
                <input type="text" id="photo-title-input" class="modal-input" placeholder="标题 (选填)">
                <textarea id="photo-desc-input" class="modal-textarea" placeholder="描述 (选填)"></textarea>
            </div>
            <div class="modal-footer">
                <button id="skip-photo-details-btn" class="modal-button">跳过</button>
                <button id="save-photo-details-btn" class="modal-button primary">保存并继续</button>
            </div>
        </div>
    </div>

    <!-- 全屏照片查看器 -->
    <div id="photo-viewer-overlay">
        <div class="viewer-header">
            <button id="close-viewer-btn" class="viewer-btn">✕</button>
        </div>
        <div class="viewer-content">
            <button id="prev-photo-btn" class="viewer-btn nav-arrow">&#10094;</button>
            <img id="viewer-img" src="" alt="Photo view">
            <button id="next-photo-btn" class="viewer-btn nav-arrow">&#10095;</button>
        </div>
        <div class="viewer-footer">
            <h3 id="viewer-title"></h3>
            <p id="viewer-description"></p>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {

    const DATA_KEY = 'recordCenterData';
    let state = {};

    // --- State Management ---
    function getInitialState() {
        return {
            currentView: 'hub-view',
            currentSection: null, // 'memo' or 'album'
            
            // Memo state
            isMemoManageMode: false,
            currentMemoFolderId: null,
            currentNoteId: null,
            
            // Album state
            isAlbumManageMode: false,
            currentAlbumId: null,
            currentPhoto: {
                albumPhotos: [],
                photoIndex: -1
            },
            photoUploadQueue: [],

            // Data
            data: {
                memo: { folders: [], notes: [] },
                album: { folders: [], photos: [] }
            }
        };
    }

    function loadState() {
        const savedData = localStorage.getItem(DATA_KEY);
        state = getInitialState();
        if (savedData) {
            state.data = JSON.parse(savedData);
        } else {
            // Initialize with default data
            state.data.memo.folders.push({ id: Date.now(), name: "默认文件夹" });
            state.data.album.folders.push({ id: Date.now() + 1, name: "我的照片" });
        }
    }

    function saveState() {
        localStorage.setItem(DATA_KEY, JSON.stringify(state.data));
    }

    // --- View Navigation ---
    function showPage(pageId, contextPage) {
        document.querySelectorAll('.app-container > .page').forEach(p => p.classList.remove('active'));
        document.getElementById(pageId).classList.add('active');

        if (contextPage) {
            contextPage.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
            contextPage.classList.add('active');
        }
    }

    function showView(viewId, sectionId) {
        state.currentView = viewId;
        const section = document.getElementById(sectionId);
        section.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
        document.getElementById(viewId).classList.add('active');
        showPage(sectionId);
    }

    // --- Generic Handlers ---
    document.body.addEventListener('click', e => {
        // Back buttons
        if (e.target.matches('.back-btn')) {
            const targetViewId = e.target.dataset.target;
            if (targetViewId === 'hub-view') {
                showPage('hub-view');
            } else {
                showView(targetViewId, e.target.closest('.page.active').id);
            }
        }
        // Modal close buttons
        if (e.target.matches('[data-action="close-modal"]')) {
            e.target.closest('.modal-overlay').classList.remove('show');
        }
    });
    
    // Hub navigation
    document.getElementById('goto-memo-btn').addEventListener('click', () => {
        state.currentSection = 'memo';
        renderMemoFolders();
        showView('folder-view', 'memo-section');
    });
    document.getElementById('goto-album-btn').addEventListener('click', () => {
        state.currentSection = 'album';
        renderAlbumFolders();
        showView('album-folder-view', 'album-section');
    });

    // ===================================================================
    // ========================== MEMO LOGIC =============================
    // ===================================================================
    const folderListContainer = document.getElementById('folder-list-container');
    const notesListContainer = document.getElementById('notes-list-container');
    const manageMemoBtn = document.getElementById('manage-memo-folders-btn');

    function renderMemoFolders() {
        folderListContainer.innerHTML = '';
        if (state.data.memo.folders.length === 0) {
            folderListContainer.innerHTML = `<p class="empty-list-placeholder">没有文件夹</p>`;
            return;
        }
        state.data.memo.folders.forEach(folder => {
            const folderEl = document.createElement('div');
            folderEl.className = 'folder-item';
            folderEl.dataset.folderId = folder.id;
            folderEl.innerHTML = `
                <div class="folder-icon">📁</div>
                <div class="folder-name">${folder.name}</div>
                <div class="delete-icon" data-action="delete-memo-folder">×</div>`;
            folderListContainer.appendChild(folderEl);
        });
    }

    function renderNotes() {
        notesListContainer.innerHTML = '';
        const notesInFolder = state.data.memo.notes
            .filter(note => note.folderId === state.currentMemoFolderId)
            .sort((a, b) => b.timestamp - a.timestamp);

        if (notesInFolder.length === 0) {
            notesListContainer.innerHTML = `<p class="empty-list-placeholder">没有笔记</p>`;
            return;
        }
        notesInFolder.forEach(note => {
            const noteEl = document.createElement('div');
            noteEl.className = 'note-item';
            noteEl.dataset.noteId = note.id;
            const preview = note.content.substring(0, 100);
            const date = new Date(note.timestamp).toLocaleDateString('zh-CN');
            noteEl.innerHTML = `
                <div class="note-title">${note.title || '无标题'}</div>
                <div class="note-preview">${preview || '没有内容'}</div>
                <div class="note-timestamp">${date}</div>`;
            notesListContainer.appendChild(noteEl);
        });
    }

    manageMemoBtn.addEventListener('click', () => {
        state.isMemoManageMode = !state.isMemoManageMode;
        folderListContainer.classList.toggle('manage', state.isMemoManageMode);
        manageMemoBtn.textContent = state.isMemoManageMode ? '完成' : '管理';
    });

    folderListContainer.addEventListener('click', e => {
        if (state.isMemoManageMode) {
            if (e.target.dataset.action === 'delete-memo-folder') {
                const folderItem = e.target.closest('.folder-item');
                const folderId = Number(folderItem.dataset.folderId);
                const folder = state.data.memo.folders.find(f => f.id === folderId);
                if (confirm(`确定要删除文件夹 "${folder.name}" 吗？\n该文件夹下的所有笔记也将被删除！`)) {
                    state.data.memo.folders = state.data.memo.folders.filter(f => f.id !== folderId);
                    state.data.memo.notes = state.data.memo.notes.filter(n => n.folderId !== folderId);
                    saveState();
                    renderMemoFolders();
                }
            }
            return;
        }

        const folderItem = e.target.closest('.folder-item');
        if (folderItem) {
            state.currentMemoFolderId = Number(folderItem.dataset.folderId);
            const folder = state.data.memo.folders.find(f => f.id === state.currentMemoFolderId);
            document.getElementById('notes-view-title').textContent = folder.name;
            renderNotes();
            showView('notes-view', 'memo-section');
        }
    });

    notesListContainer.addEventListener('click', e => {
        const noteItem = e.target.closest('.note-item');
        if (noteItem) {
            state.currentNoteId = Number(noteItem.dataset.noteId);
            const note = state.data.memo.notes.find(n => n.id === state.currentNoteId);
            document.getElementById('note-title-input').value = note.title;
            document.getElementById('note-content-textarea').value = note.content;
            document.getElementById('delete-note-btn').style.display = 'inline-block';
            showView('note-editor-view', 'memo-section');
        }
    });
    
    document.getElementById('add-note-fab').addEventListener('click', () => {
        state.currentNoteId = null;
        document.getElementById('note-title-input').value = '';
        document.getElementById('note-content-textarea').value = '';
        document.getElementById('delete-note-btn').style.display = 'none';
        showView('note-editor-view', 'memo-section');
    });

    document.getElementById('save-note-btn').addEventListener('click', () => {
        const title = document.getElementById('note-title-input').value.trim();
        const content = document.getElementById('note-content-textarea').value.trim();
        if (state.currentNoteId) {
            const note = state.data.memo.notes.find(n => n.id === state.currentNoteId);
            note.title = title;
            note.content = content;
            note.timestamp = Date.now();
        } else {
            if (!title && !content) {
                showView('notes-view', 'memo-section');
                return;
            };
            state.data.memo.notes.push({ id: Date.now(), folderId: state.currentMemoFolderId, title, content, timestamp: Date.now() });
        }
        saveState();
        renderNotes();
        showView('notes-view', 'memo-section');
    });

    document.getElementById('cancel-note-btn').addEventListener('click', () => showView('notes-view', 'memo-section'));

    document.getElementById('delete-note-btn').addEventListener('click', () => {
        if (!confirm('确定删除此笔记？')) return;
        state.data.memo.notes = state.data.memo.notes.filter(n => n.id !== state.currentNoteId);
        saveState();
        renderNotes();
        showView('notes-view', 'memo-section');
    });

    // ===================================================================
    // ========================= ALBUM LOGIC =============================
    // ===================================================================
    const albumListContainer = document.getElementById('album-list-container');
    const photoListContainer = document.getElementById('photo-list-container');
    const manageAlbumBtn = document.getElementById('manage-album-folders-btn');

    function renderAlbumFolders() {
        albumListContainer.innerHTML = '';
        if (state.data.album.folders.length === 0) {
            albumListContainer.innerHTML = `<p class="empty-list-placeholder">没有相册</p>`;
            return;
        }
        state.data.album.folders.forEach(folder => {
            const photoCount = state.data.album.photos.filter(p => p.albumId === folder.id).length;
            const albumEl = document.createElement('div');
            albumEl.className = 'album-item';
            albumEl.dataset.albumId = folder.id;
            albumEl.innerHTML = `
                <div>
                    <div class="folder-icon">🖼️</div>
                    <div class="folder-name">${folder.name}</div>
                </div>
                <div class="album-info">${photoCount} 张照片</div>
                <div class="delete-icon" data-action="delete-album-folder">×</div>`;
            albumListContainer.appendChild(albumEl);
        });
    }

    function renderPhotos() {
        photoListContainer.innerHTML = '';
        const photosInAlbum = state.data.album.photos
            .filter(p => p.albumId === state.currentAlbumId)
            .sort((a, b) => b.timestamp - a.timestamp);
        
        if (photosInAlbum.length === 0) {
            photoListContainer.innerHTML = `<p class="empty-list-placeholder">没有照片</p>`;
            return;
        }
        photosInAlbum.forEach((photo, index) => {
            const photoEl = document.createElement('div');
            photoEl.className = 'photo-item';
            photoEl.dataset.photoId = photo.id;
            photoEl.style.backgroundImage = `url(${photo.imageData})`;
            photoListContainer.appendChild(photoEl);
        });
    }

    manageAlbumBtn.addEventListener('click', () => {
        state.isAlbumManageMode = !state.isAlbumManageMode;
        albumListContainer.classList.toggle('manage', state.isAlbumManageMode);
        manageAlbumBtn.textContent = state.isAlbumManageMode ? '完成' : '管理';
    });

    albumListContainer.addEventListener('click', e => {
        if (state.isAlbumManageMode) {
            if (e.target.dataset.action === 'delete-album-folder') {
                const albumItem = e.target.closest('.album-item');
                const albumId = Number(albumItem.dataset.albumId);
                const album = state.data.album.folders.find(f => f.id === albumId);
                if (confirm(`确定要删除相册 "${album.name}" 吗？\n该相册下的所有照片也将被删除！`)) {
                    state.data.album.folders = state.data.album.folders.filter(f => f.id !== albumId);
                    state.data.album.photos = state.data.album.photos.filter(p => p.albumId !== albumId);
                    saveState();
                    renderAlbumFolders();
                }
            }
            return;
        }
        const albumItem = e.target.closest('.album-item');
        if (albumItem) {
            state.currentAlbumId = Number(albumItem.dataset.albumId);
            const album = state.data.album.folders.find(f => f.id === state.currentAlbumId);
            document.getElementById('photo-grid-title').textContent = album.name;
            renderPhotos();
            showView('photo-grid-view', 'album-section');
        }
    });

    photoListContainer.addEventListener('click', e => {
        const photoItem = e.target.closest('.photo-item');
        if (photoItem) {
            const photoId = Number(photoItem.dataset.photoId);
            openPhotoViewer(photoId, { wander: false });
        }
    });

    // ===================================================================
    // ==================== FOLDER MODAL (Generic) =======================
    // ===================================================================
    const folderModal = document.getElementById('folder-modal');
    let editingFolder = { type: null, id: null };

    function openFolderModal(type, id = null) {
        editingFolder = { type, id };
        const titleEl = document.getElementById('folder-modal-title');
        const inputEl = document.getElementById('folder-name-input');
        
        if (id) {
            const folder = state.data[type].folders.find(f => f.id === id);
            titleEl.textContent = '重命名文件夹';
            inputEl.value = folder.name;
        } else {
            titleEl.textContent = type === 'memo' ? '新备忘录文件夹' : '新相册';
            inputEl.value = '';
        }
        folderModal.classList.add('show');
        inputEl.focus();
    }

    document.getElementById('add-folder-fab').addEventListener('click', () => openFolderModal('memo'));
    document.getElementById('add-album-fab').addEventListener('click', () => openFolderModal('album'));

    document.getElementById('save-folder-btn').addEventListener('click', () => {
        const name = document.getElementById('folder-name-input').value.trim();
        if (!name) return;

        const { type, id } = editingFolder;
        if (id) {
            state.data[type].folders.find(f => f.id === id).name = name;
        } else {
            state.data[type].folders.push({ id: Date.now(), name });
        }
        saveState();
        if (type === 'memo') renderMemoFolders();
        if (type === 'album') renderAlbumFolders();
        folderModal.classList.remove('show');
    });

    // ===================================================================
    // ==================== PHOTO UPLOAD & DETAILS =======================
    // ===================================================================
    const photoUploader = document.getElementById('photo-uploader');
    const photoDetailsModal = document.getElementById('photo-details-modal');
    const savePhotoDetailsBtn = document.getElementById('save-photo-details-btn');
    const skipPhotoDetailsBtn = document.getElementById('skip-photo-details-btn');

    photoUploader.addEventListener('change', e => {
        const files = e.target.files;
        if (!files.length) return;
        state.photoUploadQueue = Array.from(files);
        processPhotoUploadQueue();
        e.target.value = ''; // Reset input
    });

    function processPhotoUploadQueue() {
        if (state.photoUploadQueue.length === 0) {
            renderPhotos();
            renderAlbumFolders(); // Update photo count
            return;
        }

        const file = state.photoUploadQueue[0];
        const reader = new FileReader();
        reader.onload = (event) => {
            document.getElementById('upload-thumbnail').src = event.target.result;
            document.getElementById('photo-title-input').value = '';
            document.getElementById('photo-desc-input').value = '';
            photoDetailsModal.dataset.imageData = event.target.result;
            document.getElementById('photo-details-modal-title').textContent = `添加照片信息 (${state.photoUploadQueue.length} 待处理)`;
            photoDetailsModal.classList.add('show');
        };
        reader.readAsDataURL(file);
    }

    function saveUploadedPhoto(skip = false) {
        const title = skip ? '' : document.getElementById('photo-title-input').value.trim();
        const description = skip ? '' : document.getElementById('photo-desc-input').value.trim();
        const imageData = photoDetailsModal.dataset.imageData;

        state.data.album.photos.push({
            id: Date.now() + Math.random(),
            albumId: state.currentAlbumId,
            title, description, imageData,
            timestamp: Date.now(),
        });
        saveState();

        state.photoUploadQueue.shift(); // Dequeue
        photoDetailsModal.classList.remove('show');
        processPhotoUploadQueue();
    }

    savePhotoDetailsBtn.addEventListener('click', () => saveUploadedPhoto(false));
    skipPhotoDetailsBtn.addEventListener('click', () => saveUploadedPhoto(true));

    // ===================================================================
    // ======================== PHOTO VIEWER =============================
    // ===================================================================
    const viewerOverlay = document.getElementById('photo-viewer-overlay');
    const viewerImg = document.getElementById('viewer-img');
    const viewerTitle = document.getElementById('viewer-title');
    const viewerDesc = document.getElementById('viewer-description');

    function openPhotoViewer(photoId, options = { wander: false, scope: 'local' }) {
        viewerOverlay.classList.toggle('wandering', options.wander);
        viewerOverlay.dataset.wanderScope = options.scope;

        let photo;
        if (options.wander) {
            const photoPool = options.scope === 'global' 
                ? state.data.album.photos 
                : state.data.album.photos.filter(p => p.albumId === state.currentAlbumId);
            if(photoPool.length === 0) return;
            const randomIndex = Math.floor(Math.random() * photoPool.length);
            photo = photoPool[randomIndex];
        } else {
            state.currentPhoto.albumPhotos = state.data.album.photos
                .filter(p => p.albumId === state.currentAlbumId)
                .sort((a, b) => b.timestamp - a.timestamp);
            state.currentPhoto.photoIndex = state.currentPhoto.albumPhotos.findIndex(p => p.id === photoId);
            photo = state.currentPhoto.albumPhotos[state.currentPhoto.photoIndex];
        }
        
        if (photo) {
            updatePhotoInViewer(photo);
            viewerOverlay.classList.add('active');
        }
    }

    function updatePhotoInViewer(photo) {
        if (!photo) return;
        viewerImg.src = photo.imageData;
        viewerTitle.textContent = photo.title || '';
        viewerDesc.textContent = photo.description || '';
    }

    document.getElementById('global-wander-btn').addEventListener('click', () => openPhotoViewer(null, { wander: true, scope: 'global' }));
    document.getElementById('local-wander-btn').addEventListener('click', () => openPhotoViewer(null, { wander: true, scope: 'local' }));
    
    document.getElementById('close-viewer-btn').addEventListener('click', () => viewerOverlay.classList.remove('active'));
    
    document.getElementById('prev-photo-btn').addEventListener('click', () => {
        state.currentPhoto.photoIndex = (state.currentPhoto.photoIndex - 1 + state.currentPhoto.albumPhotos.length) % state.currentPhoto.albumPhotos.length;
        updatePhotoInViewer(state.currentPhoto.albumPhotos[state.currentPhoto.photoIndex]);
    });
    document.getElementById('next-photo-btn').addEventListener('click', () => {
        state.currentPhoto.photoIndex = (state.currentPhoto.photoIndex + 1) % state.currentPhoto.albumPhotos.length;
        updatePhotoInViewer(state.currentPhoto.albumPhotos[state.currentPhoto.photoIndex]);
    });

    // Swipe navigation for viewer
    let touchStartX = 0;
    viewerOverlay.addEventListener('touchstart', e => { touchStartX = e.touches[0].clientX; });
    viewerOverlay.addEventListener('touchend', e => {
        let touchEndX = e.changedTouches[0].clientX;
        let deltaX = touchEndX - touchStartX;

        if (Math.abs(deltaX) > 50) { // Swipe threshold
            if (viewerOverlay.classList.contains('wandering')) {
                // In wander mode, any swipe gets another random photo
                openPhotoViewer(null, { wander: true, scope: viewerOverlay.dataset.wanderScope });
            } else {
                // In normal mode, swipe navigates sequentially
                if (deltaX > 0) document.getElementById('prev-photo-btn').click(); // Swipe Right
                else document.getElementById('next-photo-btn').click(); // Swipe Left
            }
        }
    });

    // --- Init ---
    loadState();

});
</script>

</body>
</html>
